services:
  zookeeper:
    image: bitnami/zookeeper:3.9.1
    # to survive the container restart
    tmpfs: "/zktmp"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    ports:
      - "2181:2181"
    networks:
      - custom

  kafka1:
    image: bitnami/kafka:3.7.0
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,EXTERNAL://0.0.0.0:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      # optional - enable topic auto create
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: 'yes'
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data1:/bitnami/kafka
    command:
      - sh
      - -c
      - |
        /opt/bitnami/scripts/kafka/entrypoint.sh /run.sh &
        sleep 5
        # Create test-topic with 1 partition and replication factor of 1
        kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --partitions 1 --replication-factor 1
        wait
    networks:
      - custom

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka1
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - custom


  asset-api:
    build:
      context: .
      dockerfile: services/asset-api/Dockerfile
    ports:
      - "8001:8001"
    depends_on:
      - asset-db
    networks:
      - custom
    environment:
      DB_HOST: asset-db
      DB_PORT: 5432
      DB_USERNAME: asset
      DB_PASSWORD: asset
      DB_NAME: asset
      WALLET_API: http://wallet-api:8000
    restart: unless-stopped

  wallet-api:
    build:
      context: .
      dockerfile: services/wallet-api/Dockerfile
    ports:
      - "8000:8000"
    environment:
      DB_HOST: wallet-db
      DB_PORT: 5432
      DB_USERNAME: wallet
      DB_PASSWORD: wallet
      DB_NAME: wallet
    depends_on:
      - wallet-db
    networks:
      - custom
    restart: unless-stopped

  transaction-consumer:
    build:
      context: .
      dockerfile: services/transaction-consumer/Dockerfile
    environment:
      DB_HOST: asset-db
      DB_PORT: 5432
      DB_USERNAME: asset
      DB_PASSWORD: asset
      DB_NAME: asset
      KAFKA_BROKER: kafka1:9092
      KAFKA_TOPIC: test-topic
      KAFKA_GROUP_ID: consumer-group-1
    depends_on:
      - kafka1
    networks:
      - custom
    restart: unless-stopped

  transaction-outbox-publisher:
    build:
      context: .
      dockerfile: services/transaction-outbox-publisher/Dockerfile
    ports:
      - "8002:8002"
    environment:
      DB_HOST: asset-db
      DB_PORT: 5432
      DB_USERNAME: asset
      DB_PASSWORD: asset
      DB_NAME: asset
      KAFKA_BROKER: kafka1:9092
      KAFKA_TOPIC: test-topic
    depends_on:
      - asset-db
      - kafka1
    networks:
      - custom
    restart: unless-stopped


  wallet-db:
    image: postgres:13
    environment:
      POSTGRES_USER: wallet
      POSTGRES_PASSWORD: wallet
      POSTGRES_DB: wallet
      TZ: "Europe/Istanbul"
    ports:
      - "5430:5432"
    volumes:
      - wallet_db_data:/var/lib/postgresql/data
    networks:
      - custom

  asset-db:
    image: postgres:13
    environment:
      POSTGRES_USER: asset
      POSTGRES_PASSWORD: asset
      POSTGRES_DB: asset
      TZ: "Europe/Istanbul"
    ports:
      - "5431:5432"
    volumes:
      - asset_db_data:/var/lib/postgresql/data
    networks:
      - custom

volumes:
  wallet_db_data:
  asset_db_data:
  kafka_data1:
    driver: local

networks:
  custom:
    driver: bridge